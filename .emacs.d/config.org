#+TITLE: GuMacs Configuration
#+AUTHOR: Gunnar Bastkowski
#+EMAIL: gunnar@bastkowski.name
#+OPTIONS: num:nil

* Bootstrap
** Basic Settings
  #+begin_src emacs-lisp
    (defconst emacs-start-time (current-time))

    (setq gc-cons-threshold   402653184
          gc-cons-percentage  0.6
          message-log-max     16384)
  #+end_src

** Basic Functions
*** Host System
  #+begin_src emacs-lisp
    (defun gumacs/mac-p () (eq system-type 'darwin))
    (defun gumacs/linux-p () (eq system-type 'gnu/linux))
    (defun gumacs/mswindows-p () (eq system-type 'windows-nt))

    (defun gumacs/window-system-mac-p ()
      ;; ns is returned instead of mac on Emacs 25+
      (memq (window-system) '(mac ns)))
  #+end_src
*** Key Bindings
#+begin_src emacs-lisp
  (defun gumacs/set-leader-keys (key def &rest bindings)
    "Add KEY and DEF as key bindings under the leader key.
  KEY should be a string suitable for passing to `kbd', and it
  should not include the leaders. DEF is most likely a quoted
  command. See `define-key' for more information about the possible
  choices for DEF. This function simply uses `define-key' to add
  the bindings.

  For convenience, this function will accept additional KEY DEF
  pairs. For example,

  \(gumacs/set-leader-keys
     \"a\" 'command1
     \"C-c\" 'command2
     \"bb\" 'command3\)"
    (while key
      (define-key gumacs-default-map (kbd key) def)
      (setq key (pop bindings) def (pop bindings))))
#+end_src

** Package Management
  See [[https://jeffkreeftmeijer.com/emacs-straight-use-package/][Emacs package management with straight.el and use-package]]
  Installs use-package with [[https://github.com/radian-software/straight.el][straight.el]]

*** Setup Package Archives
  #+begin_src emacs-lisp
    (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  #+end_src

*** Install [[https://github.com/radian-software/straight.el][straight.el: ]]
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

*** Install use-package
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (use-package straight
      :custom (straight-use-package-by-default t))
  #+end_src


* Editor Settings
** Unicode Support
  #+begin_src emacs-lisp
    (prefer-coding-system 'utf-8)
  #+end_src
*** [[https://github.com/rolandwalker/ucs-utils][ucs-utils: Utilities for Unicode characters in Emacs]]
  #+begin_src emacs-lisp
    (use-package ucs-utils
      :straight (uu-patch :type git :host github :repo "rolandwalker/ucs-utils"))
  #+end_src

*** [[https://github.com/rolandwalker/list-utils][list-utils: List-manipulation utility functions for Emacs]]
  #+begin_src emacs-lisp
    (use-package list-utils
      :straight (lu-patch :type git :host github :repo "rolandwalker/list-utils"))
  #+end_src

*** [[https://github.com/rolandwalker/font-utils][font-utils: Utility functions for working with fonts]]
  #+begin_src emacs-lisp
    (use-package font-utils
      :straight (fu-patch :type git :host github :repo "rolandwalker/font-utils"))
  #+end_src

*** [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts: Configure Unicode fonts for Emacs]]
  #+begin_src emacs-lisp
    (use-package unicode-fonts
      :straight (uf-patch :type git :host github :repo "rolandwalker/unicode-fonts")
      :init
      (progn
        (when (eq window-system 'ns)
          (setq unicode-fonts-skip-font-groups '(decorative low-quality-glyphs))))
    :config
    (unicode-fonts-setup))

    (use-package persistent-soft
      :defer t)

    (use-package ligature
      :straight (el-patch :type git :host github :repo "mickeynp/ligature.el"))
  #+end_src

** evil and bind-map
*** [[https://github.com/emacs-evil/evil][evil: The extensible vi layer for Emacs]]
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :config
      (evil-mode 1))

    (use-package evil-surround
      :ensure t
      :config (global-evil-surround-mode))

    (use-package evil-indent-textobject
      :ensure t)

    (use-package powerline-evil
      :ensure t
      :config
      (powerline-evil-vim-color-theme))
  #+end_src
*** [[https://github.com/justbur/emacs-bind-map][emacs-bind-map: Bind personal keymaps in multiple locations]]
  #+begin_src emacs-lisp
    (use-package bind-map
      :config
      (bind-map gumacs-default-map
          :prefix-cmd gumacs-cmds
          :keys ("M-m")
          :evil-keys ("SPC")
          :override-minor-modes t
          :override-mode-name gumacs-leader-override-mode))

        ;; (package-install 'bind-map)
        ;; (require 'bind-map)
        ;; (bind-map gumacs-default-map
        ;;   :prefix-cmd gumacs-cmds
        ;;   :keys ("M-m")
        ;;   :evil-keys ("SPC")
        ;;   :override-minor-modes t
        ;;   :override-mode-name gumacs-leader-override-mode)
  #+end_src

*** [[https://github.com/justbur/emacs-which-key][emacs-which-key: Emacs package that displays available keybi...]]
  #+begin_src emacs-lisp
    (use-package which-key
      :config
      (progn
        (setq which-key-popup-type 'side-window)
        (which-key-mode)
        (which-key-setup-side-window-bottom)))
  #+end_src

** Appearance
*** Theme
  #+begin_src emacs-lisp
    (use-package darcula-theme
      :ensure t
      :config
      (set-frame-font "MesloLGS NF")
      (load-theme 'darcula t))
  #+end_src
*** [[https://github.com/seagle0128/doom-modeline][doom-modeline: A fancy and fast mode-line inspired by min...]]
  #+begin_src emacs-lisp
    ;; (use-package doom-modeline
    ;;   :ensure t
    ;;   :hook (after-init . doom-modeline-mode))
  #+end_src

*** [[https://github.com/milkypostman/powerline][powerline: emacs powerline]]
  #+begin_src emacs-lisp
    (use-package vim-powerline
      :straight (vp-patch :type git :host github :repo "milkypostman/powerline")
      :ensure t
      :hook (after-init . powerline-default-theme))
  #+end_src

** Helm
  #+begin_src emacs-lisp
    (use-package helm
      :config
      (progn
        (helm-mode)
        ;; (require 'helm-config)
        (setq helm-input-idle-delay                     0.01
              helm-reuse-last-window-split-state        t
              helm-always-two-windows                   t
              helm-split-window-inside-p                nil
              helm-commands-using-frame                 '(completion-at-point
                                                          helm-apropos
                                                          helm-eshell-prompts helm-imenu
                                                          helm-imenu-in-all-buffers)
              helm-actions-inherit-frame-settings       t
              helm-use-frame-when-more-than-two-windows t
              helm-use-frame-when-dedicated-window      t
              helm-frame-background-color               "DarkSlateGray"
              helm-show-action-window-other-window      'left
              helm-allow-mouse                          t
              helm-move-to-line-cycle-in-source         t
              helm-autoresize-max-height                80 ; it is %.
              helm-autoresize-min-height                20 ; it is %.
              helm-debug-root-directory                 "/Users/gunnar.bastkowski/tmp/helm-debug"
              helm-follow-mode-persistent               t
              helm-candidate-number-limit               500
              helm-visible-mark-prefix                  "âœ“")
        (set-face-foreground 'helm-mark-prefix "Gold1")
        (add-to-list 'helm-sources-using-default-as-input 'helm-source-info-bash)

        ;; use helm to switch last(/previous) visited buffers with C(-S)-tab
        (define-key helm-map (kbd "<C-tab>") 'helm-follow-action-forward)
        (define-key helm-map (kbd "<C-iso-lefttab>") 'helm-follow-action-backward)
        ;; alter helm-bookmark key bindings to be simpler
        (defun simpler-helm-bookmark-keybindings ()
          (define-key helm-bookmark-map (kbd "C-d") 'helm-bookmark-run-delete)
          (define-key helm-bookmark-map (kbd "C-e") 'helm-bookmark-run-edit)
          (define-key helm-bookmark-map
            (kbd "C-f") 'helm-bookmark-toggle-filename)
          (define-key helm-bookmark-map
            (kbd "S-<return>") 'helm-bookmark-run-jump-other-window)
          (define-key helm-bookmark-map (kbd "C-/") 'helm-bookmark-help))
        (with-eval-after-load 'helm-bookmark
          (simpler-helm-bookmark-keybindings))))
    (use-package ace-jump-helm-line
      :defer (or idle-time t)
      :init
      (with-eval-after-load 'helm
        (define-key helm-map (kbd "C-q") 'ace-jump-helm-line)))
    (use-package helm-ag)
    (use-package helm-descbinds
      :config (helm-descbinds-mode))
    (use-package helm-mode-manager)
    (use-package helm-org)
    (use-package helm-projectile)
    (use-package helm-swoop)
    (use-package helm-xref)
    (use-package imenu)
    (use-package persp-mode)
    (use-package popwin
      :init
      ;; (popwin-mode 1)
      )
    (use-package projectile)
  #+end_src

* Version Control
  #+begin_src emacs-lisp
    (use-package magit
      :straight t)
  #+end_src


* Org Mode
  #+begin_src emacs-lisp
    (use-package org
      :ensure t)
    (use-package evil-org
      :ensure t
      :config
      (evil-org-set-key-theme
      '(textobjects insert navigation additional shift todo heading))
      (add-hook 'org-mode-hook (lambda () (evil-org-mode))))
  #+end_src


* Key Bindings
** Emacs
  #+begin_src emacs-lisp
    (defun gumacs/prompt-kill-emacs ()
      "Prompt to save changed buffers and exit Spacemacs"
      (interactive)
      (save-some-buffers nil t)
      (kill-emacs))

    (defun gumacs/kill-emacs ()
      "Lose all changes and exit Spacemacs"
      (interactive)
      (kill-emacs))

    (defun gumacs/frame-killer ()
      "Kill server buffer and hide the main Emacs window"
      (interactive)
      (condition-case nil
          (delete-frame nil 1)
        (error
        (make-frame-invisible nil 1))))
  #+end_src


** Files
  #+begin_src emacs-lisp
    (setq gumacs-files-map (make-sparse-keymap))
    (define-key  gumacs-default-map  "f"        (cons "files"                    gumacs-files-map))
    (define-key  gumacs-files-map    "f"        (cons "open file"               'helm-find-files))
    (define-key  gumacs-files-map    "r"        (cons "recent files"            'helm-recentf))
  #+end_src


** Help
  #+begin_src emacs-lisp
    (setq gumacs-help-map (make-sparse-keymap))
    (define-key  gumacs-default-map  "h"        (cons "Help"                     gumacs-help-map))
    (define-key  gumacs-help-map     "k"        (cons "show top level"          'which-key-show-top-level))
    (define-key  gumacs-help-map     "RET"      (cons "helm-enable-minor-mode"  'helm-enable-minor-mode))
    (define-key  gumacs-help-map     "<return>" (cons "helm-enable-minor-mode"  'helm-enable-minor-mode))
  #+end_src
*** Describe
  #+begin_src emacs-lisp
    (setq gumacs-describe-map (make-sparse-keymap))
    (define-key  gumacs-help-map     "d"        (cons "describe"                 gumacs-describe-map))
    (define-key  gumacs-describe-map "k"        (cons "key"                     'describe-key))
  #+end_src
